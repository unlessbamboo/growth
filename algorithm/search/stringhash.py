#!/usr/bin/env python
#coding:utf8
##
# @file stringhash.py
# @brief    hash算法（散列算法、摘要算法）和hash表的统称
#               1,hash——一种数据编码方式
#                   将大尺寸的数据浓缩到一个数字中，从而方便的实现
#                   数据匹配、数据查找功能、密码校验
#                   数据编码方式有：
#                       csv编码、json编码、base编码、md5(hash)、sha(hash)
#               2，为何会提升速度？
#                   大数据匹配非常慢，固定长度数据的匹配当然非常快，笨蛋
#               3，缺点
#                   可能存在某些不同的大数据经过编码之后得到一模一样的
#                   hash
#               4，混淆
#                   md5本身不仅仅作为加密，仅仅是一种编码方式.
#               5，hash表构建过程中的hash函数使用的算法就是hash算法
#
#           散列法：
#               注意，其本身也是hash大家族中的一员，它是连接hash算法和hash
#               表结构的中坚力量，支撑起了社会主义伟大事业
#               1，功能：
#                   元素特征 --> 数组下标转变的方法
#               2，除法散列：
#                   index = value % 16
#               3，平方散列：
#                   index = (value * value) >> 28（不用在意溢出啦，溢出就溢出）
#               4，斐波那契散列：
#                   黄金分割法则：0,1,1,2,3,5,。。。
#                   斐波那契和太阳系八大行星轨道半径：出奇的吻合
#                   理想乘数：
#                       16位——40503
#                       32位——2654435769
#
#                   index = (value * 40503) >> 13
#
#           hash表
#               1，hash-table——根据key-value进行查找的数据结构，该数据
#                   结构中存放key-value的一条条记录
#               2，一般实现：
#                   hash(str1) == strhashvalue(散列值)；
#                   将strhashvalue存储到hash表中，其中涉及冲突解决等等问题；
#                   从而实现了strhashvalue-->数组小标的转变；
#                   好的hash算法必然是尽可能少的冲突啦；
#
#           优势：
#               数组优势：寻址容易，插入和删除困难
#               链表优势：寻址困难，插入和删除容易
#               hash表：
#                   拉链表：
#                       （拉链法结构）链表的数组，数组中每一个元素都是一条链表
#                   开地址法：
#
#
#           用途：
#               1，海量数据查找TOP10（用于很多地方）
#               2，快速查找、删除的基本数据结构，数据一般都存入内存中
# @author unlessbamboo
# @version 1.0
# @date 2016-02-18


if __name__ == '__main__':
    """main"""
    pass

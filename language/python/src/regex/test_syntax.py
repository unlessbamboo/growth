""" 
语法说明:
    (...): 分组, 括号中的匹配项会放入分组中
    (?:...): 非分组版本

    + a. 一般字符
        .:          除\n以外的任何字符
        \:          转义字符
        [...]:      字符集中的任意一个字符
    
    + b. 预定义字符串集:
        \d:         数字0~9
        \D:         非数字, [^\d]
        \s:         空白字符, [<space>\t\r\n\f\v]
        \S:         非空白字符, [^\s]
        \w:         单词字符: [A-Za-z0-9]
        \W:         非单词字符: [^\w]

    + c. 数量词
        *           0~N次, 尽可能为N次
        +           1~N次, 尽可能为N次
        ?           0或1次, 尽可能为1次
        {m}         m次
        {m,n}       m到n次, 尽可能为n次, 注意m和n之前不能有空格
    
    + d. 边界匹配
        ^           字符串开头, 多行模式下匹配每一行开头
        $           字符串末尾, 多行模式下匹配每一行的末尾
        \A          仅匹配字符串开头
        \Z          仅匹配字符串末尾
        \b          匹配\w(单词字符)和\W(非单词字符)之间, 一般表示单词边界, 例如"a\b!bc"匹配"a!bc"不匹配
        \B          [^\b], 这两者都是单词边界，不匹配任何实际字符
                    
                    > \b: 表示字母数字和非字母数字的的边界, 非字母数字和字母数字的边界
                    > \B: 表示字符数字和字母数字的边界, 非字母数字和非字母数字的边界
    + e. 逻辑分组
        |               或关系, 其左右表达式任意匹配一个即可
        (...)           分组关系, 其中分组编号: 0-原始字符串, 1-第一个分组, ...
        (?P<name1>...)  命名分组
        \<number>       引用编号<number>的分组匹配到的字符串, 例如"(\d)abc\1"
        (?P=name1)       引用命名分组<name1>的分组匹配到的字符串

    + f. 不作为分组的特殊构造逻辑()包含
        (?:...)         不分组版本, 用于模块化以便使用逻辑运算符或者量词
        (?iLmsux)       其中i表示忽略大小写, 每一个字符都代表一个匹配模式
        (?#...)         注释信息
        (?=...)         后续的字符串内容需要匹配表达式才成功匹配, 不消耗字符串内容
        (?!...)         后续的字符串内容需要不匹配表达式才成功匹配, 不消耗字符串内容
        (?<=...)        前面的字符串内容需要匹配表达式才成功匹配, 不消耗字符串内容
        (?<!...)        前面的字符串内容需要不匹配表达式才成功匹配, 不消耗字符串内容
        (?(id/name)Yes-Pattern|No-Pattern):     二元运算符


贪婪: 默认情况下, 数量词是贪婪的, 岂会尽可能的匹配更多的字符, 非贪婪: 匹配尽可能少的字符
    例如: 'abbbc'在'ab*?'下仅仅会匹配'a', 连b都不会匹配

        *?          0~N, 但尽可能为0次, 例如'abbbc'在'ab*?c'下匹配'abbbc', 'ac'在'ab*?c'下也匹配
        +?          1~N, 但尽可能为1次
        ??          0~1, 但尽可能为0次
        {m,n}?      m~N, 但尽可能为n次

反斜杠和原生字符串: 若无原生字符串, 则``\d``变为``\\d``, , 若需要匹配``\``, 则实际正则: ``\\\\``


原始字符串: https://juejin.cn/post/7155461143350378503
参考: https://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html
"""

import re


def match_ip():
    """ (?:...): (...)的非组版本 """
    # 1. 非精确匹配
    s1 = 'IP is 192.168.239.224, show me. Invalid ip is 01.999.32.2, show me also'
    p1 = r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b'
    result = re.findall(p1, s1)
    print(f'原始字符串: {s1}\n表达式: {p1}\n匹配结果: {result}')
    print()

    # 精确匹配
    p1 = r'\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b'
    result = re.findall(p1, s1)
    print(f'原始字符串: {s1}\n表达式: {p1}\n匹配结果: {result}')
    print()


def match_group():
    """ 分组概念测试 """
    m = re.match(r'(\w+) (\w+)(?P<sign>.*)', 'hello world!')
    print('匹配结果, 分组1: {m.group(1)}, 分组3: {m.group(3)}, 原始串: {m.group(0)}')
    print()


if __name__ == '__main__':
    print('-----------ip 匹配-------------')
    match_ip()

    print('-----------分组匹配-------------')
    match_group()
